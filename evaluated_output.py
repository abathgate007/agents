# Author: Andrew Bathgate | Date: 2025-06-26
from dataclasses import dataclass, field
from typing import List, Optional

@dataclass
class EvaluatedOutput:
    # The final accepted output content (e.g., a threat model, checklist, etc.)
    output_content: str  

    # The name of the model that produced the accepted output
    model_name: str

    # Whether the final output passed evaluation (True = accepted, False = rejected)
    passes: bool

    # Explanation for why the output was accepted or rejected
    evaluation_reason: str

    # Number of attempts it took to get an acceptable result
    attempts: int

    # Optional numeric score representing quality, completeness, etc. (0–10, or None if not scored)
    final_score: Optional[float] = None

    # A list of failed attempts, typically including reasons or raw outputs for audit/debugging
    failed_attempts: List[str] = field(default_factory=list)

    def as_markdown(self) -> str:
        """Returns the content formatted as Markdown, with attribution."""
        return f"### Generated by {self.model_name}\n\n{self.output_content}"

    def summary(self) -> str:
        """Returns a text summary of key evaluation metadata."""
        return (
            f"Model: {self.model_name}\n"
            f"Attempts: {self.attempts}\n"
            f"Score: {self.final_score if self.final_score is not None else 'N/A'}\n"
            f"Final status: {'✅ Passed' if self.passes else '❌ Failed'}\n"
            f"Reason: {self.evaluation_reason}"
        )
